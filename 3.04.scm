(use slib)
(require 'trace)


(define (make-account balance password)
  (define (withdraw amount)
    (if (>= balance amount)
      (begin (set! balance (- balance amount))
             balance)
      "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (define (dispatch m)
    (cond ((eq? m 'withdraw) withdraw)
          ((eq? m 'deposit) deposit)
          (else (error "Unknown request -- MAKE-ACCOUNT"
                       m))))

  (define error-count 0)
  (define (password-check-and-dispatch p m)
    (if (eq? p password)
      (begin
        (set! error-count 0)
        (dispatch m)
        )
      (begin
        (set! error-count (+ error-count 1))
        (if (= error-count 7)
          (error "calling-the-cops...")
          (lambda (args...) "Incorrect password"))
        )
      )
    )
  password-check-and-dispatch)

(define acc (make-account 100 'secret-password))
(print ((acc 'secret-password 'withdraw) 40))
(print ((acc 'some-other-password 'withdraw) 1))
(print ((acc 'some-other-password 'withdraw) 2))
(print ((acc 'some-other-password 'withdraw) 3))
(print ((acc 'some-other-password 'withdraw) 4))
(print ((acc 'some-other-password 'withdraw) 5))
(print ((acc 'some-other-password 'withdraw) 6))
(print ((acc 'secret-password 'withdraw) 40))
(print ((acc 'some-other-password 'withdraw) 1))
(print ((acc 'some-other-password 'withdraw) 2))
(print ((acc 'some-other-password 'withdraw) 3))
(print ((acc 'some-other-password 'withdraw) 4))
(print ((acc 'some-other-password 'withdraw) 5))
(print ((acc 'some-other-password 'withdraw) 6))
(print ((acc 'some-other-password 'withdraw) 7))

